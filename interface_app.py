import streamlit as st
import google.generativeai as genai
import json

# --- Configura√ß√£o da P√°gina e Chave da API ---
st.set_page_config(page_title="Rapport.AI", page_icon="üß†")

# Usando o sistema de segredos do Streamlit para a chave do Google
GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=GOOGLE_API_KEY)

# --- A L√≥gica Principal (O "C√©rebro") ---
PROMPT_MESTRE = """
Voc√™ √© o 'Rapport.AI', um assistente de comunica√ß√£o para aplicativos de relacionamento.
Sua miss√£o √© ajudar o usu√°rio a criar conex√µes genu√≠nas e marcar encontros, aplicando os princ√≠pios de dois livros:
'Manual de Persuas√£o do FBI' (Jack Schafer): Foco em criar confian√ßa, fazer o outro se sentir bem consigo mesmo, usar perguntas abertas e validar sentimentos.
'Como Convencer em 90 Segundos' (Nicholas Boothman): Foco em espelhar o tom, ser positivo, curioso e quebrar o gelo de forma eficaz.
O usu√°rio fornecer√° a bio do 'match' e o hist√≥rico da conversa. Sua tarefa √© analisar a √∫ltima mensagem do 'match' e gerar tr√™s tipos de sugest√µes de resposta para o usu√°rio.
As respostas devem ser:
Aut√™nticas e leves, nunca rob√≥ticas ou manipuladoras.
Terminar com uma pergunta aberta para manter a conversa fluindo.
Adaptadas ao tom da conversa (se o match √© engra√ßado, seja engra√ßado; se √© s√©rio, seja mais profundo).
Analise o contexto abaixo e retorne sua resposta EXCLUSIVAMENTE em formato JSON com a seguinte estrutura:
{
"analise_de_vibe": "Uma breve an√°lise do sentimento e interesse do match.",
"termometro_de_interesse": um n√∫mero de 0 a 100,
"sugestoes": {
"aprofundar_conexao": "Uma resposta focada em validar o que o match disse e aprofundar a conversa (Estilo FBI).",
"manter_interesse": "Uma resposta mais divertida, com humor ou uma provoca√ß√£o leve para manter a din√¢mica (Estilo Boothman).",
"ponte_para_encontro": "Uma resposta que cria uma oportunidade para sugerir um encontro, SE o momento for apropriado. Se n√£o for, deixe este campo como 'Ainda √© cedo para um convite.'"
}
}
"""

def gerar_sugestao_resposta(bio_match, historico_conversa, ultima_mensagem_match):
    try:
        model = genai.GenerativeModel('gemini-1.5-pro-latest')
        # A API do Gemini precisa que a instru√ß√£o de formato JSON esteja no prompt.
        # Tamb√©m precisamos limpar a resposta para garantir que seja um JSON v√°lido.
        full_prompt = f"""
        {PROMPT_MESTRE}

        CONTEXTO:
        - Bio do Match: "{bio_match}"
        - Hist√≥rico da Conversa: "{historico_conversa}"
        - √öltima Mensagem do Match para eu responder: "{ultima_mensagem_match}"
        
        Por favor, gere as sugest√µes de resposta no formato JSON solicitado.
        """
        
        response = model.generate_content(full_prompt)
        
        # Limpa a sa√≠da da API para garantir que √© apenas o JSON
        json_text = response.text.strip().replace("```json", "").replace("```", "").strip()
        
        sugestoes_json = json.loads(json_text)
        return sugestoes_json
        
    except Exception as e:
        # Fornece um erro mais informativo para debugging
        error_message = f"Ocorreu um erro ao contatar a API do Google Gemini: {e}"
        print(error_message) # Isso aparecer√° nos logs do Streamlit
        return {"error": error_message}

# --- O resto da Interface Gr√°fica com Streamlit (permanece igual) ---
st.title("üß† Rapport.AI")
st.caption("Seu assistente de IA para criar conex√µes genu√≠nas (Powered by Google Gemini)") # Adicionei uma men√ß√£o ao Gemini!

st.header("Insira os dados da conversa:")
bio_do_match = st.text_area("Bio do Match", "Amante de viagens, viciada em caf√© e tentando aprender a tocar viol√£o. N√£o curto papo furado.")
historico_da_conversa = st.text_area("Hist√≥rico da Conversa", "Eu: Oi! Vi que vc t√° aprendendo viol√£o. J√° conseguiu tirar alguma m√∫sica ou s√≥ na parte dos dedos doendo? haha\nMatch: Hahaha por enquanto mais na parte dos dedos doendo mesmo! Mas j√° arrisco uns acordes de Legi√£o Urbana.")
ultima_mensagem_do_match = st.text_input("√öltima Mensagem do Match (para voc√™ responder)", "Meu final de semana foi √≥timo, descobri uma cafeteria nova no centro que tem um bolo de cenoura incr√≠vel.")

if st.button("Gerar Sugest√µes com IA"):
    with st.spinner('Analisando a conversa com Google Gemini...'):
        sugestoes = gerar_sugestao_resposta(bio_do_match, historico_da_conversa, ultima_mensagem_do_match)
    st.divider()
    if "error" in sugestoes:
        st.error(sugestoes["error"])
    else:
        st.header("An√°lise do Rapport.AI")
        interesse = sugestoes.get('termometro_de_interesse', 0)
        st.metric(label="Term√¥metro do Interesse", value=f"{interesse}/100")
        st.progress(interesse)
        st.info(f"**An√°lise de Vibe:** {sugestoes.get('analise_de_vibe', 'N/A')}")
        st.header("Suas Op√ß√µes de Resposta")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.subheader("ü§ù Aprofundar Conex√£o")
            st.write(sugestoes.get('sugestoes', {}).get('aprofundar_conexao', 'N/A'))
        with col2:
            st.subheader("üî• Manter Interesse")
            st.write(sugestoes.get('sugestoes', {}).get('manter_interesse', 'N/A'))
        with col3:
            st.subheader("‚òï Ponte para o Encontro")
            st.write(sugestoes.get('sugestoes', {}).get('ponte_para_encontro', 'N/A'))